pragma solidity ^0.8;

import 'forge-std/Test.sol';
import '../src/LibPrime.sol';

contract LibPrimeTest is Test {
    using LibPrime for *;

    function testMillerRabinPrimes() external {
        assertTrue(1125540086003892878803180776828183430567643582896516824516711208213767778259.millerRabin());
        assertTrue(8151264910564214172552510538961784892584498710314126382318393854523032748717.millerRabin());
        assertTrue(9341551731633778114822211379357199272851770827068248495866801830534051079929.millerRabin());
        assertTrue(6383743443909871561251952811638977086566121113380770830041649864793597646919.millerRabin());
        assertTrue(2197237718394458030831647368114264829507199079704407667327722758706981233497.millerRabin());
        assertTrue(9064410868229390086903624029203948821248589545509547153592200186831638728037.millerRabin());
        assertTrue(1799466658399057863907043434608765089771426415844247818936512270861804814529.millerRabin());
        assertTrue(7958107354969503546281116282192284922725110310373243636780351171294849091149.millerRabin());
        assertTrue(6233608841289520883910733449408872496191252688032601148221449555432858393371.millerRabin());
        assertTrue(8232380694307874843762241985653295453383187296264055776639176195540846588177.millerRabin());
        assertTrue(5034174091600194978581305209190743984142140769305288608948960772413483626687.millerRabin());
        assertTrue(8340069717972680297994903766600336241596238101580434803328056533048918734499.millerRabin());
        assertTrue(1400537736944484887219968349997533796837304349170394400672628030568034687019.millerRabin());
        assertTrue(7520612482180968453530128273879667845425382183748651655131527203600612317503.millerRabin());
        assertTrue(1568708150223417680875870983919763865151824932396420592501674440793940383849.millerRabin());
    }

    function testMillerRabinComposites() external {
        assertFalse(77964831525692884797883941280343483705963436342330276397207500137689802540683.millerRabin());
        assertFalse(82759076614562733566162717800611268120219491424231847353865427758691245064713.millerRabin());
        assertFalse(79569617363601924884153431348317756325168711481228499021767957072125679353463.millerRabin());
        assertFalse(96456030341838941027885660248303830685767675352263886385505714885252735264761.millerRabin());
        assertFalse(87303596289265269243314105546076342324770676247491661794301909147693304678629.millerRabin());
        assertFalse(89418699728448612365273532859219711591469699186896323234970199605383616796611.millerRabin());
        assertFalse(102686483693295261482374501469692601621691881805129823059161026023136393467521.millerRabin());
        assertFalse(100827321586573390103410299914251806613088577895591410890837411469484045257943.millerRabin());
        assertFalse(94128134159363765893818739739984830816830611868110630592828808089947398172777.millerRabin());
        assertFalse(108085637192410575789366279024874286273962525672256069022303443544858097144649.millerRabin());
        assertFalse(96180706847834726148648760777164730946291489426377513905027404959537647930361.millerRabin());
        assertFalse(87076567172118503597188860638837644441587221163921968400109407171198457539427.millerRabin());
        assertFalse(70666671983287789261443601580170993214444162055061702589752320932490682520563.millerRabin());
        assertFalse(74923400682541913227386583453207489840788830780999066633545322166801156807827.millerRabin());
        assertFalse(98564863894178100815105859857252021763531252705165621436813233429818583039041.millerRabin());
    }
}